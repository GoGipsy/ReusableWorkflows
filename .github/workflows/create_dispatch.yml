name: Dispatch to IaC
on: 

  workflow_call:
    inputs:
      destination: 
        required: true
        type: string
      environment:
        required: true
        type: string
      aws-region:
        required: true
        type: string
      image: 
        required: true
        type: string
      tag:
        required: false
        type: string
      repository: 
        required: true
        type: string
      registry: 
        required: true
        type: string
      auto-merge: 
        required: false
        type: string
    secrets:
      app-id:
        required: true
      private-key: 
        required: true  
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
  
jobs:

  dispatch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        id: aws-account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with: 
          mask-password: true

      - name: Generate a token
        uses: actions/create-github-app-token@v1
        id: generate_token
        with:
          app-id: ${{ secrets.app-id }}
          private-key: ${{ secrets.private-key }}
          owner: ${{ github.repository_owner }}

      - name: Use the token
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          gh api octocat  

      - name: create a repository_dispatch event
        id: post_dispatches
        uses: octokit/request-action@v2.x
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}   
        with:
          route: POST /repos/${{ github.repository_owner }}/${{ inputs.destination }}/dispatches
          data: '{
            event_type: ${{ inputs.environment }}, 
            client_payload: {
              sha: "${{ github.sha }}", 
              from: "${{ github.repository }}", 
              branch: "${{ github.ref_name }}", 
              image: "${{ inputs.image }}", 
              tag: "${{ inputs.tag }}",
              repository: "${{ inputs.repository }}", 
              registry: "${{ steps.login-ecr.outputs.registry }}", 
              auto-merge: "${{ inputs.auto-merge }}" 
            }
          }'
            
    
