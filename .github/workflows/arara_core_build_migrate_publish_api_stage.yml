name: Build and Publish API Core Stage

on:
  workflow_call:
    inputs:
      dotnet_version:
        required: true
        type: string
      dotnet_ef_version:
        required: true
        type: string
      build_configuration:
        required: true
        type: string
      package_output_directory:
        required: true
        type: string
      kube_namespace:
        required: true
        type: string
      kube_environment:
        required: true
        type: string
      base_name:
        required: true
        type: string
      aws_region:
        required: true
        type: string
      api_project_name:
        required: true
        type: string
      dbcontext_project_name:
        required: true
        type: string
      api_dockerfile_nae:
        required: true
        type: string
      dbcontext_name:
        required: true
        type: string
      db_hostname:
        required: true
        type: string
      db_name:
        required: true
        type: string
      db_username:
        required: true
        type: string
      db_password:
        required: true
        type: string
jobs:
  build:
    runs-on: ubuntu-20.04
    outputs:
      KUBE_NAMESPACE: ${{ inputs.KUBE_NAMESPACE }}
      KUBE_ENVIRONMENT: ${{ inputs.KUBE_ENVIRONMENT }}
      BASE_NAME: ${{ inputs.BASE_NAME }}
      AWS_REGION: ${{ inputs.AWS_REGION }}
      API_DOCKERFILE_NAME: ${{ inputs.API_DOCKERFILE_NAME }}
    steps:
    - uses: actions/checkout@v4
    - name: Install dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ inputs.DOTNET_VERSION }}
    - name: Install dotnet-ef
      run: dotnet tool update --global dotnet-ef --version ${{ inputs.DOTNET_EF_VERSION }}
    - name: Add Source
      run: dotnet nuget add source ${{ vars.NUGET_SOURCE_URL }} --username ${{ vars.NUGET_USERNAME }} --password ${{ secrets.NUGET_AUTH_TOKEN }} --store-password-in-clear-text
    - name: Restore
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore --configuration ${{ inputs.BUILD_CONFIGURATION }}
    - name: Generate Migrations Script
      run: |
        dotnet ef migrations script \
        --configuration ${{ inputs.BUILD_CONFIGURATION }} \
        --output ${{ github.workspace }}/${{ inputs.DBCONTEXT_NAME }}.sql \
        --idempotent \
        --context ${{ inputs.DBCONTEXT_NAME }} \
        --project ${{ inputs.DBCONTEXT_PROJECT_NAME }}/${{ inputs.DBCONTEXT_PROJECT_NAME }}.csproj \
        --startup-project ${{ inputs.API_PROJECT_NAME }}/${{ inputs.API_PROJECT_NAME }}.csproj \
        --no-build \
        --verbose

    - name: Publish
      run: |
        dotnet publish ${{ inputs.API_PROJECT_NAME }}/${{ inputs.API_PROJECT_NAME }}.csproj \
        --configuration ${{ inputs.BUILD_CONFIGURATION }} \
        --output '${{ inputs.PACKAGE_OUTPUT_DIRECTORY }}'
        mv ${{ inputs.API_PROJECT_NAME }}/${{ inputs.API_DOCKERFILE_NAME }} \
        ${{ inputs.PACKAGE_OUTPUT_DIRECTORY }}

    - name: Archive build artifact
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: ${{ inputs.PACKAGE_OUTPUT_DIRECTORY }}

    - name: Archive migrate artifact
      uses: actions/upload-artifact@v3
      with:
        name: migrate
        path: ${{ github.workspace }}/${{ inputs.DBCONTEXT_NAME }}.sql

    migrate:
      needs: [build]
      runs-on: ${{ needs.build.outputs.KUBE_ENVIRONMENT }}
      steps:
      - uses: actions/download-artifact@v3
        with:
          name: migrate
      - name: Install psql
        run: | 
          sudo apt-get install -y postgresql-client
          sudo apt-get install -y postgresql-common
      - name: Update Database
        run: |
          export PGPASSWORD="${{ inputs.DB_PASSWORD }}"
          psql \
          postgresql://${{ inputs.DB_HOSTNAME }}/${{ inputs.DB_NAME }}?user=${{ inputs.DB_USERNAME }} \
          --echo-all \
          --file=${{ github.workspace }}/${{ inputs.DBCONTEXT_NAME }}.sql

    publish:
      needs: [build,migrate]
      uses: GoGipsy/ReusableWorkflows/.github/workflows/deploy_core_api_to_eks.yml@master
      with:
        aws-region: ${{ needs.build.outputs.AWS_REGION }}
        base-name: ${{ needs.build.outputs.BASE_NAME }}
        repository-sufix: "-api" 
        dockerfile-name: ${{ needs.build.outputs.API_DOCKERFILE_NAME }}
        build-artifact-name: build
      secrets:
        aws-access-key-id: ${{ secrets.GDS_AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.GDS_AWS_SECRET_KEY }}
  