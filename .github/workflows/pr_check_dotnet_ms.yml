name: Build, Test and Coverage

on:
  workflow_call:
    inputs:
      coverage-threshold:
        description: "The minimum coverage threshold. Below this, the workflow will fail."
        required: false
        default: 90
        type: string
      dotnet-version:
        description: "The version of dotnet to use."
        required: false
        default: 7.0.x
        type: string
      runs-on:
        description: "Runner to use. Always try to use self-hosted runners."
        required: false
        default: ubuntu-latest
        type: string
      nuget-source-url:
        description: "Nuget source url."
        required: false
        type: string
      nuget-user-name:
        description: "Nuget user name."
        required: false
        type: string
    secrets:
      nuget-auth-token:
        description: "Nuget authentication token."
        required: false
      deepsource-dns:
        description: "DeepSource DSN of this repository."
        required: true

jobs:
  build_test_coverage:
    name: Build, Test and Coverage
    runs-on: ${{ inputs.runs-on }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Add Nuget Source
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.nuget-auth-token }}
        if: ${{ env.NUGET_AUTH_TOKEN != '' }} 
        run: dotnet nuget add source ${{ inputs.nuget-source-url }} --username ${{ inputs.nuget-user-name }} --password ${{ env.NUGET_AUTH_TOKEN }} --store-password-in-clear-text
      
      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Format
        run: dotnet format --verify-no-changes

      - name: Test
        run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Find coverage report
        id: find_coverage
        shell: pwsh
        run: |
          $covreport = Get-ChildItem -Filter coverage.cobertura.xml -Recurse | Sort-Object -Descending -Property LastWriteTime | Select-Object -First 1
          echo "Coverage report found at $covreport"
          echo "::set-output name=coverage-report-path::$covreport"

      - name: Report test coverage to DeepSource
        uses: deepsourcelabs/test-coverage-action@master
        with:
          key: csharp
          coverage-file: ${{ steps.find_coverage.outputs.coverage-report-path }}
          dsn: ${{ secrets.deepsource-dns }}
          
      - name: Analyze Coverage
        shell: pwsh
        run: |
          $covreport = Get-Item -Path ${{ steps.find_coverage.outputs.coverage-report-path }}
          Write-Output $covreport
          $covxml = [xml](Get-Content -Path $covreport)
          $coverage = $covxml.coverage.'line-rate'
          $threshold = [double]${{inputs.coverage-threshold}} / 100
          if ($coverage -lt $threshold) {
            Write-Output "Coverage is below threshold ($coverage < $threshold)"
            exit 1
          } else {
            Write-Output "Coverage passed ($coverage >= $threshold)"
          }